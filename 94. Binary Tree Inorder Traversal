# 94. Binary Tree Inorder Traversal

## Solution1
Morris Traversal: space complexity O(1), time complexity O(n)
threaded binary tree:
- 如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。

- 如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。

   - 如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。

   - 如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。

- 重复以上1、2直到当前节点为空。
```c++
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root){
        vector<int> temp;
        TreeNode* cur = root;
        while(cur){
            if (cur->left){
                TreeNode* prev = cur->left;
                while (prev->right!=NULL && prev->right!=cur){
                    prev = prev->right;
                }
                if (prev->right==NULL){
                    prev->right = cur;
                    cur = cur->left;
                }else{
                    prev->right = NULL;
                    temp.push_back(cur->val);
                    cur = cur->right;
                }
            }else{
                temp.push_back(cur->val);
                cur = cur->right;
            }
        }
        return temp;
    }
};
```

## Solution2
iterative with stack: space complexity O(n), time complexity O(n)
```c++
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root){
        vector<int> temp;
        stack<TreeNode*> s;
        TreeNode* cur = root;
        if (!cur) return temp;
        while (cur || !s.empty()){
            while (cur){
                s.push(cur);
                cur = cur->left;
            }
            cur = s.top();
            s.pop();
            temp.push_back(cur->val);
            cur = cur->right;
        }
        return temp;
    }
};
```

***

**enjoy life, coding now! :D**
